<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="./index.xsl"?>

<!--
這是官網首頁內容，同時也是簡體中文的本地化內容。

其它語言的本化地內容，需要重新改寫本文件中除註釋外的所有內容。
-->

<docs lang="zh-hant">
    <title>apidoc | RESTful API 文檔處理工具</title>
    <license url="https://creativecommons.org/licenses/by/4.0/deed.zh">署名 4.0 國際 (CC BY 4.0)</license>

    <!-- 類型描述中表格的相關本化地信息 -->
    <type-locale>
        <header>
            <name>名稱</name>
            <type>類型</type>
            <required>必填</required>
            <description>描述</description>
        </header>
    </type-locale>

    <doc id="about" title="關於">
        <p>apidoc 是壹個簡單的 <abbr title="Representational State Transfer">RESTful</abbr> <abbr title="Application Programming Interface">API</abbr> 文檔生成工具，它從代碼註釋中提取特定格式的內容生成文檔。支持諸如 Go、Java、C++、Rust 等大部分開發語言，具體可使用 <code>apidoc lang</code> 命令行查看所有的支持列表。</p>

        <p>apidoc 擁有以下特點：</p>
        <ol>
            <li>跨平臺，linux、windows、macOS 等都支持；</li>
            <li>支持語言廣泛，即使是不支持，也很方便擴展；</li>
            <li>支持多個不同語言的多個項目生成壹份文檔；</li>
            <li>輸出模板可自定義；</li>
            <li>根據文檔生成 mock 數據；</li>
        </ol>

        <p>以下是壹段簡短的 C 語言風格代碼下的示例：</p>
        <pre><code class="language-markup"><![CDATA[/**
 * <api method="GET" summary="獲取所有的用戶信息">
 *     <path path="/users">
 *         <query name="page" type="number" default="0">顯示第幾頁的內容</query>
 *         <query name="size" type="number" default="20">每頁顯示的數量</query>
 *     </path>
 *     <tag>user</tag>
 *     <server>users</server>
 *     <response status="200" type="object" mimetype="application/json">
 *         <param name="count" type="int" optional="false" summary="符合條件的所有用戶數量" />
 *         <param name="users" type="object" array="true" summary="用戶列表">
 *             <param name="id" type="int" summary="唯壹 ID" />
 *             <param name="name" type="string" summary="姓名" />
 *         </param>
 *     </response>
 *     <response status="500" mimetype="application/json" type="obj">
 *         <param name="code" type="int" summary="錯誤代碼" />
 *         <param name="msg" type="string" summary="錯誤內容" />
 *     </response>
 * </api>
 */]]></code></pre>
        <p>多行註釋中，每壹行中以<code>空白字符+symbol+空白字符</code>開頭的，這些字符將會被過濾，symbol 表示該註釋塊的起始字符中的任意字符。比如以上代碼中，所有的 <var>*</var> 將被過濾。</p>
    </doc>

    <doc id="usage" title="使用" />

    <doc id="spec" title="文檔格式">
        <p>文檔采用 XML 格式。存在兩個頂級標簽：<code>apidoc</code> 和 <code>api</code>，用於描述整體內容和具體接口信息。</p>

        <p>文檔被從註釋中提取之後，最終會被合並成壹個 XML 文件，在該文件中 <code>api</code> 作為 <code>apidoc</code> 的壹個子元素存在，如果妳的項目不想把文檔寫在註釋中，也可以直接編寫壹個完整的 XML 文件，將 <code>api</code> 作為 <code>apidoc</code> 的壹個子元素。</p>

        <p>具體可參考<a href="./example/index.xml">示例代碼。</a></p>

        <p>以下是對各個 XML 元素以及參數介紹，其中以 <code>@</code> 開頭的表示 XML 屬性；<code>.</code> 表示為當前元素的內容；其它表示子元素。</p>
    </doc>

    <doc id="install" title="安裝" parent="usage">
          <p>可以直接從 <a href="https://github.com/caixw/apidoc/releases">https://github.com/caixw/apidoc/releases</a> 查找妳需要的版本下載，放入 <code>PATH</code> 中即可使用。如果沒有妳需要的平臺文件，則需要從源代碼編譯：</p>
        <ul>
            <li>下載 Go 編譯工具</li>
            <li>下載源代碼</li>
            <li>執行代碼中 <code>build/build.sh</code> 或是 <code>build/build.cmd</code> 進行編譯</li>
            <li>編譯好的文件存放在 cmd/apidoc 下，可以將該文件放置在 PATH 目錄</li>
        </ul>
    </doc>

    <doc id="env" title="環境變量" parent="usage">
        <p>apidoc 會讀取 <var>LANG</var> 的環境變量作為其本地化的依據，若想指定其它語種，可以手動指定 <var>LANG</var> 環境變量：<samp>LANG=zh-Hant apidoc</samp>。在 windows 系統中，若不存在 <var>LANG</var> 環境變量，則會調用 <samp>GetUserDefaultLocaleName</samp> 函數來獲取相應的語言信息。</p>
    </doc>

    <doc id="cli" title="命令行" parent="usage">
        <p>可以通過 <samp>apidoc help</samp> 查看命令行支持的子命令。主要包含了以下幾個：</p>
        <table>
            <thead><tr><th>子命令</th><th>描述</th></tr></thead>
            <tbody>
                <tr><td>help</td><td>顯示子命令的描述信息</td></tr>
                <tr><td>build</td><td>生成文檔內容</td></tr>
                <tr><td>mock</td><td>根據文檔提供 mock 服務</td></tr>
                <tr><td>static</td><td>提供查看文檔的本地服務</td></tr>
                <tr><td>version</td><td>顯示版本信息</td></tr>
                <tr><td>lang</td><td>列出當前支持的語言</td></tr>
                <tr><td>locale</td><td>列出當前支持的本地化內容</td></tr>
                <tr><td>detect</td><td>根據指定的目錄生成配置文件</td></tr>
                <tr><td>test</td><td>檢測語法是否準確</td></tr>
                <tr><td>lsp</td><td>啟動 language server protocol 服務</td></tr>
            </tbody>
        </table>
        <p>mock 子命令可以根據文檔生成壹些符合要求的隨機數據。這些數據每次請求都不相同，包括數量、長度、數值大小等。</p>
    </doc>

    <!-- 配置文件的類型定義 -->
    <types parent="usage">
        <type name=".apidoc.yaml">
            <description>
                <p>配置文件名固定為 <code>.apidoc.yaml</code>，格式為 YAML，可參考 <a href="example/.apidoc.yaml">.apidoc.yaml</a>。文件可以通過命令 <code>apidoc detect</code> 生成。主要包含了以幾個配置項：</p>
            </description>
            <item name="version" >產生此配置文件的 apidoc 版本</item>
            <item name="inputs">指定輸入的數據，同壹項目只能解析壹種語言。</item>
            <item name="inputs.dir">需要解析的源文件所在目錄</item>
            <item name="inputs.recursive">是否解析子目錄下的源文件</item>
            <item name="inputs.encoding">編碼，默認為 <code>utf-8</code>，值可以是 <a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml">character-sets</a> 中的內容。</item>
            <item name="inputs.lang">源文件類型。具體支持的類型可通過 -l 參數進行查找</item>
            <item name="output">控制輸出行為</item>
            <item name="output.path">指定輸出的文件名，包含路徑信息。</item>
            <item name="output.type">指定輸出的文件格式，值可以是 <var>apidoc+xml</var>、<var>openapi+json</var> 和 <var>openapi+yaml</var>，其中 <var>apidoc+xml</var> 為默認值。</item>
            <item name="output.tags">只輸出與這些標簽相關聯的文檔，默認為全部。</item>
            <item name="output.style">為 XML 文件指定的 XSL 文件。</item>
        </type>
    </types>

    <types parent="spec">
        <type name="apidoc">
            <description><p>用於描述整個文檔的相關內容，只能出現壹次。</p></description>
            <item name="@version">文檔的版本</item>
            <item name="@lang">內容的本地化 ID，比如 <samp><var>zh-hans</var></samp> 等。</item>
            <item name="@logo">圖標，默認采用官網的 <var>https://apidoc.tools/icon.svg</var>，同時作用於 favicon 和 logo，只支持 SVG 格式。</item>
            <item name="@created">文檔的生成時間</item>
            <item name="title">文檔的標題</item>
            <item name="description">文檔的整體介紹，可以是使用 HTML 內容。</item>
            <item name="contract">聯系人信息</item>
            <item name="license">內容的版權信息</item>
            <item name="tag">可以用的標簽列表</item>
            <item name="server">API 基地址列表，每個 API 最少應該有壹個 server。</item>
            <item name="mimetype">接口所支持的 mimetype 類型</item>
            <item name="response">表示所有 API 都有可能返回的內容</item>
            <item name="api">API 文檔內容</item>
        </type>

        <type name="link">
            <description><p>用於描述鏈接，壹般轉換為 HTML 的 a 標簽。</p></description>
            <item name="@url">鏈接指向的 URL</item>
            <item name="@text">鏈接的文本內容</item>
        </type>

        <type name="contact">
            <description><p>用於描述聯系方式</p></description>
            <item name="@url">鏈接的 URL，與郵箱必須二選壹必填</item>
            <item name="@email">郵件地址，與 url 必須二選壹必填</item>
            <item name=".">聯系人名稱</item>
        </type>

        <type name="tag">
            <description><p>定義標簽，標簽相當於關鍵字，作用於 API，相當於啟到分類的作用。</p></description>
            <item name="@name">標簽的唯壹 ID，推薦采用英文字母表示。</item>
            <item name="@title">標簽名稱</item>
            <item name="@deprecated">表示該標簽在大於等於該版本號時不再啟作用</item>
        </type>

        <type name="server">
            <description><p>定義服務器的相關信息，作用於 API，決定該 API 與哪個服務器相關聯。</p></description>
            <item name="@name">唯壹 ID，推薦采用英文字母表示。</item>
            <item name="@url">服務基地址</item>
            <item name="@deprecated">表示在大於等於該版本號時不再啟作用</item>
            <item name="@summary">簡要的描述內容，或者通過 <code>description</code> 提供壹份富文本內容。</item>
            <item name="description">對該服務的具體描述，可以使用 HTML 內容</item>
        </type>

        <type name="api">
            <description><p>定義接口的具體內容</p></description>
            <item name="@version">表示此接口在該版本中添加</item>
            <item name="@method">請求方法</item>
            <item name="@summary">簡要介紹</item>
            <item name="@deprecated">表示在大於等於該版本號時不再啟作用</item>
            <item name="@id">唯壹 ID</item>
            <item name="description">該接口的詳細介紹，為 HTML 內容。</item>
            <item name="path">定義路徑信息</item>
            <item name="request">定義可用的請求信息</item>
            <item name="response">定義可能的返回信息</item>
            <item name="callback">定義回調接口內容</item>
            <item name="tag">關聯的標簽</item>
            <item name="server">關聯的服務</item>
            <item name="header">傳遞的報頭內容，如果是某個 mimetype 專用的，可以放在 request 元素中。</item>
        </type>

        <type name="path">
            <description><p>用於定義請求時與路徑相關的內容</p></description>
            <item name="@path">接口地址</item>
            <item name="param">地址中的參數</item>
            <item name="query">地址中的查詢參數</item>
        </type>

        <type name="request">
            <description><p>定義了請求和返回的相關內容</p></description>
            <item name="@xml-ns">XML 標簽的命名空間</item>
            <item name="@xml-ns-prefix">XML 標簽的命名空間名稱前綴</item>
            <item name="@xml-wrapped">如果当前元素的 <code>@array</code> 为 <var>true</var>，是否将其包含在 wrapped 指定的标签中。</item>
            <item name="@name">當 mimetype 為 <var>application/xml</var> 時，此值表示 XML 的頂層元素名稱，否則無用。</item>
            <item name="@type">值的類型，可以是 <del title="建議使用空值代替"><var>none</var></del>、<var>string</var>、<var>number</var>、<var>bool</var>、<var>object</var> 和 空值；空值表示不輸出任何內容。</item>
            <item name="@deprecated">表示在大於等於該版本號時不再啟作用</item>
            <item name="@summary">簡要介紹</item>
            <item name="@array">是否為數組</item>
            <item name="@status">狀態碼。在 request 中，該值不可用，否則為必填項。</item>
            <item name="@mimetype">媒體類型，比如 <var>application/json</var> 等。</item>
            <item name="description">詳細介紹，為 HTML 內容。</item>
            <item name="enum">當前參數可用的枚舉值</item>
            <item name="param">子類型，比如對象的子元素。</item>
            <item name="example">示例代碼。</item>
            <item name="header">傳遞的報頭內容</item>
        </type>

        <type name="param">
            <description><p>參數類型，基本上可以作為 <code>request</code> 的子集使用。</p></description>
            <item name="@xml-attr">是否作為父元素的屬性，僅作用於 XML 元素。</item>
            <item name="@xml-extract">將當前元素的內容作為父元素的內容，要求父元素必須為 <var>object</var>。</item>
            <item name="@xml-ns">XML 標簽的命名空間</item>
            <item name="@xml-ns-prefix">XML 標簽的命名空間名稱前綴</item>
            <item name="@xml-attr">是否作為父元素的屬性，僅用於 XML 的請求。</item>
            <item name="@xml-wrapped">如果当前元素的 <code>@array</code> 为 <var>true</var>，是否将其包含在 wrapped 指定的标签中。</item>
            <item name="@name">值的名稱</item>
            <item name="@type">值的類型，可以是 <var>string</var>、<var>number</var>、<var>bool</var> 和 <var>object</var></item>
            <item name="@deprecated">表示在大於等於該版本號時不再啟作用</item>
            <item name="@default">默認值</item>
            <item name="@optional">是否為可選的參數</item>
            <item name="@summary">簡要介紹</item>
            <item name="@array">是否為數組</item>
            <item name="@array-style">是否以數組的形式展示數據，默認采用 form 形式，僅在 <code>@array</code> 為 <var>true</var> 時有效。</item>
            <item name="description">詳細介紹，為 HTML 內容。</item>
            <item name="enum">當前參數可用的枚舉值</item>
            <item name="param">子類型，比如對象的子元素。</item>
        </type>

        <type name="enum">
            <description><p>定義枚舉類型的數所的枚舉值</p></description>
            <item name="@value">枚舉值</item>
            <item name="@deprecated">表示在大於等於該版本號時不再啟作用</item>
            <item name=".">該值的詳細介紹</item>
        </type>

        <type name="example">
            <description><p>示例代碼</p></description>
            <item name="@mimetype">代碼的 mimetype 類型。</item>
            <item name=".">示例代碼的內容，需要使用 CDATA 包含代碼。</item>
        </type>

        <type name="header">
            <description><p>定義了請求和返回的報頭結構</p></description>
            <item name="@name">報頭的名稱</item>
            <item name="@deprecated">表示在大於等於該版本號時不再啟作用</item>
            <item name="@summary">對報頭的描述</item>
            <item name="description">對報頭的描述</item>
        </type>

        <type name="callback">
            <description><p>定義接口回調的相關內容</p></description>
            <item name="@method">請求方法</item>
            <item name="@summary">簡要介紹</item>
            <item name="@deprecated">表示在大於等於該版本號時不再啟作用</item>
            <item name="description">該接口的詳細介紹</item>
            <item name="path">定義路徑信息</item>
            <item name="request">定義可用的請求信息</item>
            <item name="response">定義可能的返回信息</item>
        </type>

        <type name="richtext">
            <description><p>富文本信息，可以以不同的格式展示數據。</p></description>
            <item name="@type">富文本的格式，目前可以是 <var>html</var> 或是 <var>markdown</var></item>
            <item name=".">實際的文本內容，根據 <code>@type</code> 屬性確定渲染的方式。</item>
        </type>

        <type name="version">
            <description>
                <p>版本號格式，遵循 <a href="https://semver.org/lang/zh-CN/">semver</a> 的規則。比如 <samp>1.1.1</samp>、<samp>0.1.0</samp> 等。</p>
            </description>
        </type>

        <type name="date">
            <description>
                <p>采用 <a href="https://tools.ietf.org/html/rfc3339">RFC3339</a> 格式表示的時間，比如：<samp>2019-12-16T00:35:48+08:00</samp></p>
            </description>
        </type>
    </types>

    <footer>
        <license>
            <p>當前頁面內容托管於 </p><p>，並采用</p><p>進行許可。</p>
        </license>
    </footer>
</docs>
