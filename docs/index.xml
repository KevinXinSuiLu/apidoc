<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="./index.xsl"?>

<!--
这是官网首页内容，同时也是简体中文的本地化内容。

其它语言的本化地内容，需要重新改写本文件中除注释外的所有内容。
-->

<docs lang="cmn-Hans">
    <title>apidoc | RESTful API 文档处理工具</title>
    <license url="https://creativecommons.org/licenses/by/4.0/deed.zh">署名 4.0 国际 (CC BY 4.0)</license>

    <!-- 类型描述中表格的相关本化地信息 -->
    <type-locale>
        <header>
            <name>名称</name>
            <type>类型</type>
            <required>必填</required>
            <description>描述</description>
        </header>
    </type-locale>

    <doc id="about" title="关于">
        <p>apidoc 是一个简单的 <abbr title="Representational State Transfer">RESTful</abbr> <abbr title="Application Programming Interface">API</abbr> 文档生成工具，它从代码注释中提取特定格式的内容生成文档。支持诸如 Go、Java、C++、Rust 等大部分开发语言，具体可使用 <code>apidoc lang</code> 命令行查看所有的支持列表。</p>

        <p>apidoc 拥有以下特点：</p>
        <ol>
            <li>跨平台，linux、windows、macOS 等都支持；</li>
            <li>支持语言广泛，即使是不支持，也很方便扩展；</li>
            <li>支持多个不同语言的多个项目生成一份文档；</li>
            <li>输出模板可自定义；</li>
            <li>根据文档生成 mock 数据；</li>
        </ol>

        <p>以下是一段简短的 C 语言风格代码下的示例：</p>
        <pre><code class="language-markup"><![CDATA[/**
 * <api method="GET" summary="获取所有的用户信息">
 *     <path path="/users">
 *         <query name="page" type="number" default="0">显示第几页的内容</query>
 *         <query name="size" type="number" default="20">每页显示的数量</query>
 *     </path>
 *     <tag>user</tag>
 *     <server>users</server>
 *     <response status="200" type="object" mimetype="application/json">
 *         <param name="count" type="int" optional="false" summary="符合条件的所有用户数量" />
 *         <param name="users" type="object" array="true" summary="用户列表">
 *             <param name="id" type="int" summary="唯一 ID" />
 *             <param name="name" type="string" summary="姓名" />
 *         </param>
 *     </response>
 *     <response status="500" mimetype="application/json" type="obj">
 *         <param name="code" type="int" summary="错误代码" />
 *         <param name="msg" type="string" summary="错误内容" />
 *     </response>
 * </api>
 */]]></code></pre>
        <p>多行注释中，每一行中以<code>空白字符+symbol+空白字符</code>开头的，这些字符将会被过滤，symbol 表示该注释块的起始字符中的任意字符。比如以上代码中，所有的 <var>*</var> 将被过滤。</p>
    </doc>

    <doc id="usage" title="使用" />

    <doc id="spec" title="文档格式">
        <p>文档采用 XML 格式。存在两个顶级标签：<code>apidoc</code> 和 <code>api</code>，用于描述整体内容和具体接口信息。</p>

        <p>文档被从注释中提取之后，最终会被合并成一个 XML 文件，在该文件中 <code>api</code> 作为 <code>apidoc</code> 的一个子元素存在，如果你的项目不想把文档写在注释中，也可以直接编写一个完整的 XML 文件，将 <code>api</code> 作为 <code>apidoc</code> 的一个子元素。</p>

        <p>具体可参考<a href="./example/index.xml">示例代码</a>。</p>

        <p>以下是对各个 XML 元素以及参数介绍，其中以 <code>@</code> 开头的表示 XML 属性；<code>.</code> 表示为当前元素的内容；其它表示子元素。</p>
    </doc>

    <!--######################### 以下为文档内容的子项 ###########################-->

    <doc id="install" title="安装" parent="usage">
        <p>可以直接从 <a href="https://github.com/caixw/apidoc/releases">https://github.com/caixw/apidoc/releases</a> 查找你需要的版本下载，放入 <code>PATH</code> 中即可使用。如果没有你需要的平台文件，则需要从源代码编译：</p>
        <ul>
            <li>下载 Go 编译工具</li>
            <li>下载源代码</li>
            <li>执行代码中 <code>build/build.sh</code> 或是 <code>build/build.cmd</code> 进行编译</li>
            <li>编译好的文件存放在 cmd/apidoc 下，可以将该文件放置在 PATH 目录</li>
        </ul>
    </doc>

    <doc id="env" title="环境变量" parent="usage">
        <p>apidoc 会读取 <var>LANG</var> 的环境变量作为其本地化的依据，若想指定其它语种，可以手动指定 <var>LANG</var> 环境变量：<samp>LANG=zh-Hant apidoc</samp>。在 windows 系统中，若不存在 <var>LANG</var> 环境变量，则会调用 <samp>GetUserDefaultLocaleName</samp> 函数来获取相应的语言信息。</p>
    </doc>

    <doc id="cli" title="命令行" parent="usage">
        <p>可以通过 <samp>apidoc help</samp> 查看命令行支持的子命令。主要包含了以下几个：</p>
    </doc>

    <doc id="apidoc.yaml" title=".apidoc.yaml" parent="usage">
        <p>配置文件名固定为 <code>.apidoc.yaml</code>，格式为 YAML，可参考 <a href="example/.apidoc.yaml">.apidoc.yaml</a>。文件可以通过命令 <code>apidoc detect</code> 生成。主要包含了以几个配置项：</p>
        <table>
            <thead><tr><th>名称</th><th>类型</th><th>选填</th><th>描述</th></tr></thead>
            <tbody>
                <tr>
                    <th>version</th>
                    <td>string</td>
                    <td><input type="checkbox" checked="true" disabled="true" /></td>
                    <td>产生此配置文件的 apidoc 版本</td>
                </tr>
                <tr>
                    <th>inputs</th>
                    <td>object[]</td>
                    <td><input type="checkbox" checked="true" disabled="true" /></td>
                    <td>指定输入的数据，同一项目只能解析一种语言。</td>
                </tr>
                <tr>
                    <th>input.dir</th>
                    <td>string</td>
                    <td><input type="checkbox" checked="true" disabled="true" /></td>
                    <td>需要解析的源文件所在目录</td>
                </tr>
                <tr>
                    <th>input.recursive</th>
                    <td>bool</td>
                    <td><input type="checkbox" disabled="true" /></td>
                    <td>是否解析子目录下的源文件</td>
                </tr>
                <tr>
                    <th>input.encoding</th>
                    <td>string</td>
                    <td><input type="checkbox" disabled="true" /></td>
                    <td>编码，默认为 <code>utf-8</code>，值可以是 <a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml">character-sets</a> 中的内容。</td>
                </tr>
                <tr>
                    <th>input.lang</th>
                    <td>string</td>
                    <td><input type="checkbox" disabled="true" /></td>
                    <td>源文件类型。具体支持的类型可通过 -l 参数进行查找</td>
                </tr>
                <tr>
                    <th>output</th>
                    <td>object</td>
                    <td><input type="checkbox" checked="true" disabled="true" /></td>
                    <td>控制输出行为</td>
                </tr>
                <tr>
                    <th>output.path</th>
                    <td>string</td>
                    <td><input type="checkbox" checked="true" disabled="true" /></td>
                    <td>指定输出的文件名，包含路径信息。</td>
                </tr>
                <tr>
                    <th>output.tags</th>
                    <td>string[]</td>
                    <td><input type="checkbox" disabled="true" /></td>
                    <td>只输出与这些标签相关联的文档，默认为全部。</td>
                </tr>
                <tr>
                    <th>output.style</th>
                    <td>string</td>
                    <td><input type="checkbox" disabled="true" /></td>
                    <td>为 XML 文件指定的 XSL 文件。</td>
                </tr>
            </tbody>
        </table>
    </doc>

    <footer>
        <license>
            <p>当前页面内容托管于 </p><p>，并采用</p><p>进行许可。</p>
        </license>
    </footer>
</docs>
